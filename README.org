* Smartrep [[http://melpa.org/#/smartrep][file:http://melpa.org/packages/smartrep-badge.svg]] [[http://stable.melpa.org/#/smartrep][file:http://stable.melpa.org/packages/smartrep-badge.svg]] [[https://travis-ci.org/myuhe/smartrep.el][https://travis-ci.org/myuhe/smartrep.el.svg?branch=master]] [[https://coveralls.io/r/myuhe/smartrep.el?branch=master][https://coveralls.io/repos/myuhe/smartrep.el/badge.svg?branch=master]]
  

  =smartrep= is a sequential command interface library. It enables the omittance of typing prefix keys. (e.g., C-c C-n C-n C-n ... instead of C-c C-n C-c C-n C-c C-n ...)

* Contents

  - [[https://github.com/myuhe/smartrep.el#usage][Usage]]
  - [[https://github.com/myuhe/smartrep.el#examples][Examples]]
  - [[https://github.com/myuhe/smartrep.el#smartrep-works-in-many-applications][Smartrep works in many applications]]
  - [[https://github.com/myuhe/smartrep.el#similar-application][Similar application]]

* Usage 
   =smartrep= offers only one function =smartrep-define-key=.
   The key is bound with =smartrep-define-key= like: 

#+begin_src elisp
     (smartrep-define-key
         global-map "M-g"
       '(("n" . next-line)
         ("p" . previous-line)))
#+end_src

Then after typing =M-g=, =n= exetutes =next-line= and =p= executes =previous-line=.

If any other key is typed, the special key binding is canceled. That is, if =n= is typed, "n" is inserted as a character.

* Examples
** Control Two Buffers
   Scroll another buffer. The current buffer is not changed.
   If you want to scroll by two lines in the other buffer, just type  =C-q n n=.
#+begin_src elisp
(smartrep-define-key 
    global-map "C-q" '(("n" . (scroll-other-window 1))
                       ("p" . (scroll-other-window -1))
                       ("N" . 'scroll-other-window)
                       ("P" . (scroll-other-window '-))
                       ("a" . (beginning-of-buffer-other-window 0))
                       ("e" . (end-of-buffer-other-window 0))))
#+end_src

** Change Window Size
   Changing Window size tends to execute the same command continuously. It is boring work.
   So eval this example and type =C-x { { {=. 

#+begin_src elisp
  (smartrep-define-key
      global-map "C-x"
    '(("{" . shrink-window-horizontally)
      ("}" . enlarge-window-horizontally)))
#+end_src


** Move header on Org-mode
   Org-mode has complicated prefix keys. It is so frustrating.

   This idea simplifies it. If you want to move from heading to heading, then type =C-c= and then =C-n= or =C-p=.

#+begin_src elisp
  (smartrep-define-key 
      org-mode-map "C-c" '(("C-n" . (outline-next-visible-heading 1))
                           ("C-p" . (outline-previous-visible-heading 1))))
#+end_src

** Remotely Control Firefox
   You may control Firefox via Emacs.

   This example enables the manipulation of Firefox to scroll up, down and more.

   It requires [[https://github.com/bard/mozrepl/blob/master/chrome/content/moz.el][moz.el]]



#+begin_src elisp
(autoload 'moz-minor-mode "moz" "Mozilla Minor and Inferior Mozilla Modes" t)
(moz-minor-mode t)

(defun moz-send-message (moz-command)
  (comint-send-string
   (inferior-moz-process)
   (concat moz-repl-name ".pushenv('printPrompt', 'inputMode'); "
           moz-repl-name ".setenv('inputMode', 'line'); "
           moz-repl-name ".setenv('printPrompt', false); undefined; "))
  (comint-send-string
   (inferior-moz-process)
   (concat moz-command
           moz-repl-name ".popenv('inputMode', 'printPrompt'); undefined;\n")))

(defun moz-scrolldown-1 ()
  (interactive)
   (moz-send-message "goDoCommand('cmd_scrollLineDown');\n")) 

(defun moz-scrolldown ()
  (interactive)
   (moz-send-message "goDoCommand('cmd_scrollPageDown');")) 

(defun moz-scrollup-1 ()
  (interactive)
   (moz-send-message "goDoCommand('cmd_scrollLineUp');\n")) 

(defun moz-scrollup ()
  (interactive)
   (moz-send-message "goDoCommand('cmd_scrollPageUp');")) 

(defun moz-top ()
  (interactive)
   (moz-send-message "goDoCommand('cmd_scrollTop');\n"))

(defun moz-bottom ()
  (interactive)
   (moz-send-message "goDoCommand('cmd_scrollBottom');\n"))

(require 'smartrep)

(smartrep-define-key 
 global-map "M-g" '(("n" . moz-scrolldown-1)
                    ("N" . moz-scrolldown)
                    ("p" . moz-scrollup-1)
                    ("P" . moz-scrollup)
                    ("a" . moz-top)
                    ("e" . moz-bottom)))
#+end_src


* Smartrep Works In Many Applications
   Many applications use =smartrep=. Thanks!!

 - [[https://github.com/rolandwalker/back-button][rolandwalker/back-button]]
 - [[https://github.com/rolandwalker/fixmee][rolandwalker/fixmee]]
 - [[https://github.com/millejoh/emacs-ipython-notebook][millejoh/emacs-ipython-notebook]]
 - [[https://github.com/aki2o/owdriver][aki2o/owdriver]]

* Related article
 - [[http://oremacs.com/2015/01/14/repeatable-commands/][Zoom in / out with style · (or emacs]]
 - [[http://sheephead.homelinux.org/2011/12/19/6930/][連続操作を素敵にするsmartrep.el作った - sheephead]] (In Japanese)
 - [[http://sheephead.homelinux.org/2012/01/30/6934/][smartrep.el 0.0.3をリリースしました - sheephead]] (In Japanese)
 - [[http://tam5917.hatenablog.com/entry/20121208/1354931551][multiple-cursors.elのキーバインドを少しだけ改善 - 備忘録]] (In Japanese)
 - [[http://d.hatena.ne.jp/rubikitch/20140613/smartrep][Emacs - smartrep.elでrepeatを活性化せよ - http://rubikitch.com/に移転しました]] (In Japanese)

* Similar Applications

[[https://github.com/abo-abo/hydra][abo-abo/hydra]]
